Symbol.observable||=Symbol("observable");export const observable=e=>e&&!!(e[Symbol.observable]||e[Symbol.asyncIterator]||e.call&&e.set||e.subscribe||e.then);const e=new FinalizationRegistry((e=>e())),b=(e,b=new WeakRef(e))=>e=>b.deref()?.(e);export default(r,s,o,t,a,l)=>r&&(s&&=b(s),o&&=b(o),t&&=b(t),l=r.subscribe?.(s,o,t)||r[Symbol.observable]?.().subscribe?.(s,o,t)||r.set&&r.call?.(a,s)||(r.then?.((e=>(!a&&s(e),t?.())),o)||(async e=>{try{for await(r of r){if(a)return;s(r)}t?.()}catch(e){o?.(e)}})())&&(e=>a=1),e.register(s||o||t,l),l);