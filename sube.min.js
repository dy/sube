Symbol.observable||=Symbol("observable");export const observable=e=>e&&!!(e[Symbol.observable]||e[Symbol.asyncIterator]||e.call&&e.set||e.subscribe||e.then);const e=new FinalizationRegistry((e=>e.call?.()));export default(r,b,s,t,a,l)=>{return r&&(o=(r[Symbol.observable]?.()||r).subscribe?.(b,s,t),l=o&&(()=>o.unsubscribe?.())||r.set&&r.call?.(a,b)||(r.then?.((e=>(!a&&b(e),t?.())),s)||(async e=>{try{for await(e of r){if(a)return;b(e)}t?.()}catch(e){s?.(e)}})())&&(e=>a=1),e.register(r,l),l);var o};