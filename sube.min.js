Symbol.observable||=Symbol("observable");export const observable=e=>e&&!!(e[Symbol.observable]||e[Symbol.asyncIterator]||e.call&&e.set||e.subscribe||e.then);export default(e,b,o,r,s)=>e&&(e.subscribe?.(b,o,r)||e[Symbol.observable]?.().subscribe?.(b,o,r)||e.set&&e.call?.(s,b)||(e.then?.((e=>(!s&&b(e),r?.())),o)||(async l=>{try{for await(e of e){if(s)return;b(e)}r?.()}catch(e){o?.(e)}})())&&(e=>s=1));