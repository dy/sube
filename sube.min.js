Symbol.observable||=Symbol("observable");export const observable=e=>e&&!!(e[Symbol.observable]||e[Symbol.asyncIterator]||e.call&&e.set||e.subscribe||e.then);const e=new FinalizationRegistry((e=>e.call?.()));export default(b,r,s,l,o,t)=>b&&(t=b.subscribe?.(r,s,l)||b[Symbol.observable]?.().subscribe?.(r,s,l)||b.set&&b.call?.(o,r)||(b.then?.((e=>(!o&&r(e),l?.())),s)||(async e=>{try{for await(e of b){if(o)return;r(e)}l?.()}catch(e){s?.(e)}})())&&(e=>o=1),e.register(b,t),t);