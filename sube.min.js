Symbol.observable||=Symbol("observable");export const observable=e=>e&&!!(e[Symbol.observable]||e[Symbol.asyncIterator]||e.call&&e.set||e.subscribe||e.then);export default(e,b,r,o,s)=>e&&(e.subscribe?.(b,r,o)||e[Symbol.observable]?.().subscribe?.(b,r,o)||e.set&&e.call?.(s,(e=>{try{b(e)}catch(e){r?.(e)}}))||(e.then?.((e=>(!s&&b(e),o?.())),r)||(async t=>{try{for await(e of e){if(s)return;b(e)}o?.()}catch(e){r?.(e)}})())&&(e=>s=1));