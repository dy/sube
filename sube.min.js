Symbol.observable||=Symbol("observable");export const observable=e=>e&&!!(e[Symbol.observable]||e[Symbol.asyncIterator]||e.call&&e.set||e.subscribe||e.then);const e=new FinalizationRegistry((e=>e.call?.())),b=(e,b=new WeakRef(e))=>e=>b.deref()?.(e);export default(r,s,a,l,o,t,c=s)=>r&&(s&&=b(s),a&&=b(a),l&&=b(l),t=r.subscribe?.(s,a,l)||r[Symbol.observable]?.().subscribe?.(s,a,l)||r.set&&r.call?.(o,s)||(r.then?.((e=>(!o&&s(e),l?.())),a)||(async e=>{try{for await(e of r){if(o)return;s(e)}l?.()}catch(e){a?.(e)}})())&&(e=>o=1),e.register(r,t),t);